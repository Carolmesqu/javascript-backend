- Utilizar os métodos includes() e indexOf():
O includes() retorna true ou false, dependendo se o valor passado como parâmetro 
está presente ou não no array. O indexOf() retorna a posição no array do valor 
passado como parâmetro. Utilizamos esses dois métodos em conjunto para primeiro 
verificar se um aluno estava presente em uma lista, e depois obter sua posição 
para buscar sua nota em outra lista.

- Desestruturar um array:
Você aprendeu a sintaxe de desestruturação, disponível desde o ES6 (EcmaScript 6), 
que nos permite criar várias novas variáveis ao mesmo tempo a partir dos elementos 
de um array.

- Utilizar a estrutura for e entender seu funcionamento:
O for é constituído de três expressões: criação da variável de controle; condição de 
execução; modificação da variável de controle. Essas três expressões juntas definem 
quantas vezes o bloco do for será executado.

- Utilizar a estrutura for of e entender a diferença em relação ao for:
O for of sempre é utilizado para percorrer todos os elementos de um array, 
do início ao fim. Para esses casos, o for of é mais conciso que o for.

Como utilizar o forEach:
Aprendemos mais uma forma de iterar sobre arrays, dessa vez com um método próprio deles. 
O forEach recebe uma função callback que será executada para cada item do array.

Diferentes formas de utilizar funções callback:
Podemos utilizar funções anônimas (como arrow functions) diretamente como funções callback, 
ou então criar funções de forma externa e utilizá-las no parâmetro.

Como utilizar o map:
O map também aceita funções callback, assim como o forEach, porém é adequado para quando 
queremos reescrever os valores de um array.

Como utilizar o filter e o reduce:
Aprendemos mais métodos modernos do JavaScript que nos ajudam em situações mais específicas. 
Utilizamos o filter para criar um array filtrado a partir de um existente e o reduce para 
acumular valores de um array em um só.

Como clonar arrays com o spread operator ...:
Entendemos o problema de referência do JavaScript ao tentar atribuir um array a um novo. 
Para resolver esse problema, utilizamos o spread operator para espalhar todos os valores 
de um array em um novo, realizando a clonagem com sucesso.

Como utilizar a estrutura Set:
Vimos como criar um Set a partir de um array existente, a fim de remover todas as suas duplicatas. 
Em seguida, utilizamos o spread operator para converter o Set de volta em um lista.